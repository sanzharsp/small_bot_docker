"""
Django settings for small project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from django.utils.translation import gettext_lazy as _
from django.templatetags.static import static
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.getenv('SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
INDOCKER = True
POSTGRES = True
PRODUCTION = True

ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'main',
    "corsheaders",
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    'dal',
    'dal_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'phonenumber_field',
    'django_prometheus',
    'import_export',
    'simple_history',
    'django_celery_beat',
    'mentoring_management',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'small.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'small.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': str(os.getenv('POSTGRES_DB')),
            'USER': str(os.getenv('POSTGRES_USER')),
            'PASSWORD': str(os.getenv('POSTGRES_PASSWORD')),  # as a POSTGRES_PASSWORD
            'HOST': os.getenv('PG_HOST'),  # as the DB's service name in docker-compose.yml
            'PORT': '',  # default
            'SCHEMA': 'public',
        }
    }


else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGES = (
    ('ru', 'Русский'),
    ('kk', 'Қазақша'),
    ('en', 'English'),
)

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

MODELTRANSLATION_DEFAULT_LANGUAGE = 'ru'

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
MODELTRANSLATION_LANGUAGES = ('ru', 'kk', 'en')
MODELTRANSLATION_FALLBACK_LANGUAGES = {
    'default': ('ru', 'en', 'kk'),
    'ru': ('en', 'kk'),
    'kk': ('ru', 'en'),
    'en': ('ru', 'kk'),
}

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Asia/Qyzylorda'

USE_I18N = True

USE_TZ = False

# Cors headers
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

REDOC_SETTINGS = {
    'LAZY_RENDERING': True,

}
SWAGGER_SETTINGS = {

    'SECURITY_DEFINITIONS': {

        'Token': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        },

    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


if INDOCKER:
    STATIC_URL = '/static/'
    STATIC_ROOT = '/var/www/static'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = '/var/www/media'


else:
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

if PRODUCTION:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    CSRF_COOKIE_SECURE = True
    # Получаем строку из переменной среды
    csrf_trusted_origins = os.getenv('CSRF_TRUSTED_ORIGINS', '')

    # Преобразуем строку в список, разделяя по запятым
    CSRF_TRUSTED_ORIGINS = csrf_trusted_origins.split(',') if csrf_trusted_origins else []
    CSRF_COOKIE_DOMAIN = str(os.getenv('CSRF_COOKIE_DOMAIN'))

    # CORS_ALLOWED_ORIGINS = [
    #     'http://188.130.234.106',
    #     'https://188.130.234.106',
    #     'https://qazalem.ziz.kz',
    #     'http://qazalem.ziz.kz'
    #                         ]

    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True

UNFOLD = {
    "SITE_TITLE": _("SMALL"),

    "SITE_HEADER": _("Administration"),
    "SITE_URL": "/",

    "SITE_ICON": {
        "light": lambda request: static("admin/icon.png"),  # light mode
        "dark": lambda request: static("admin/icon.png"),  # dark mode
    },
    # "SITE_LOGO": lambda request: static("logo.svg"),  # both modes, optimise for 32px height
    "SITE_LOGO": {
        "light": lambda request: static("admin/logos.svg"),  # light mode
        "dark": lambda request: static("admin/logos.svg"),  # dark mode
    },
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SHOW_HISTORY": True,  # show/hide "History" button, default: True
    "SHOW_VIEW_ON_SITE": True,  # show/hide "View on site" button, default: True
    "LOGIN": {
        "image": lambda request: static("admin/login.jpg"),
        # "redirect_after": lambda request: reverse_lazy("admin:APP_MODEL_changelist"),
    }
}

# Celery settings



# CELERY_BROKER_URL = 'redis://redis:6379/0'
# CELERY_RESULT_BACKEND = 'redis://redis:6379/0'

CELERY_BROKER_URL = 'memory://'
CELERY_RESULT_BACKEND = 'cache+memory://'

CELERY_TIMEZONE = 'Asia/Qyzylorda'  # Установите правильный часовой пояс
CELERY_ENABLE_UTC = True  # Отключите использование UTC, если вы работаете с локальными временными зонами
CELERY_TASK_ACKS_LATE = True  # Подтверждение выполнения задачи только после успешного завершения
CELERY_TASK_REJECT_ON_WORKER_LOST = True  # Повторное выполнение задачи, если worker был потерян
CELERY_BROKER_HEARTBEAT = 10  # Проверка соединения с брокером
# Также вы можете настроить долговременное сохранение состояний задач:
CELERY_RESULT_PERSISTENT = True  # Сохранение результатов задач



# CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60